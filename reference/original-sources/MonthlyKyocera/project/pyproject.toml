[project]
name = "kyocera-meter-reader"
version = "1.0.0"
description = "Automated processing and management system for Kyocera device meter readings"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    {name = "Your Organization", email = "admin@example.com"}
]
keywords = ["kyocera", "meter-reading", "document-processing", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "Topic :: Office/Business",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "fpdf2>=2.7.0",
    "duckdb>=0.10.0",
    "pyyaml>=6.0",
    "python-dateutil>=2.8.0",
    "textual>=0.50.0",
    "rich>=13.7.0",
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.5.0",
    "python-magic>=0.4.27",
    "chardet>=5.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "black>=24.0.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "ipython>=8.20.0",
]

[project.scripts]
meter-cli = "src.cli.meter_cli:main"
meter-tui = "src.tui.meter_tui:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "black>=24.0.0",
    "ruff>=0.2.0",
]

[tool.black]
line-length = 100
target-version = ['py313']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py313"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["."]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]