# Deploy Astro Documentation to GitHub Pages
name: Deploy Documentation

on:
  push:
    branches: [main]
    paths: ['docs/**', 'web/**', 'README.md', 'AGENTS.md']
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Install dependencies
        run: |
          cd web
          npm install --legacy-peer-deps

      - name: Prepare documentation for Astro
        run: |
          # Create pages from markdown documentation
          mkdir -p web/src/pages/docs

          # Copy main documentation files
          cp README.md web/src/pages/docs/readme.md
          cp AGENTS.md web/src/pages/docs/agents.md

          # Copy documentation structure maintaining hierarchy
          if [ -d "docs" ]; then
            (cd docs && find . -name "*.md" -type f | while read -r file; do
              mkdir -p "$(dirname "../web/src/pages/docs/$file")"
              cp "$file" "../web/src/pages/docs/$file"
            done)
          fi

          # Create navigation structure file
          cat > web/src/pages/docs/navigation.json << 'EOF'
          {
            "sections": [
              {"title": "Overview", "items": [
                {"title": "Project README", "path": "/docs/readme"},
                {"title": "LLM Instructions", "path": "/docs/agents"}
              ]},
              {"title": "Planning", "items": [
                {"title": "System Planning", "path": "/docs/planning/system-planning"}
              ]},
              {"title": "Implementation", "items": [
                {"title": "Phase 1 Foundation", "path": "/docs/implementation/phase-1-foundation"}
              ]},
              {"title": "Architecture", "items": [
                {"title": "Web Interface", "path": "/docs/architecture/web-interface-integration"}
              ]},
              {"title": "User Guides", "items": [
                {"title": "Getting Started", "path": "/docs/user-guides/getting-started"}
              ]},
              {"title": "Development", "items": [
                {"title": "Development Setup", "path": "/docs/development/development-setup"}
              ]},
              {"title": "API Reference", "items": [
                {"title": "API Overview", "path": "/docs/api/api-overview"}
              ]}
            ]
          }
          EOF

      - name: Build with Astro
        env:
          ASTRO_SITE: ${{ steps.pages.outputs.base_url }}
          ASTRO_BASE: ${{ steps.pages.outputs.base_path }}
        run: |
          cd web
          npm run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./web/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4